import imaplib
import email
from email.header import decode_header
import time
import re
from openai import OpenAI
from telegram import Bot
import asyncio
from datetime import datetime, timedelta
import os
from bs4 import BeautifulSoup
import dotenv
import httpx

dotenv.load_dotenv()

GMAIL_USER = os.getenv('GMAIL_USER')

GMAIL_APP_PASSWORD = os.getenv('GMAIL_APP_PASSWORD')

OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

proxy_url = os.getenv('SHADOWSOCKS_PROXY')

CHECK_INTERVAL = 10 

PROCESS_LAST_MINUTES = 10  

http_client = None

if proxy_url:
    print(f"üîê Using proxy for OpenAI: {proxy_url}")
    http_client = httpx.AsyncClient(
        proxy=proxy_url,
        timeout=30.0
    )

client = OpenAI(
    api_key=OPENAI_API_KEY,
    http_client=http_client
)

processed_emails = set() 

def connect_to_gmail():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gmail —á–µ—Ä–µ–∑ IMAP"""
    try:
        mail = imaplib.IMAP4_SSL("imap.gmail.com")
        mail.login(GMAIL_USER, GMAIL_APP_PASSWORD)
        return mail
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gmail: {e}")
        return None

def parse_email_body(msg):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–∏—Å—å–º–∞"""
    body = ""
    if msg.is_multipart():
        for part in msg.walk():
            content_type = part.get_content_type()
            content_disposition = str(part.get("Content-Disposition"))
            
            if content_type == "text/plain" and "attachment" not in content_disposition:
                try:
                    body = part.get_payload(decode=True).decode()
                except:
                    pass
            elif content_type == "text/html" and not body:
                try:
                    html = part.get_payload(decode=True).decode()
                    soup = BeautifulSoup(html, 'html.parser')
                    body = soup.get_text()
                except:
                    pass
    else:
        try:
            body = msg.get_payload(decode=True).decode()
        except:
            pass
    
    return body

def extract_task_info(email_body, subject):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏ –∏–∑ –ø–∏—Å—å–º–∞"""
    title = subject
    
    title = re.sub(r'–¥–æ\s*\d+[\d\s]*‚ÇΩ', '', title).strip()
    title = re.sub(r'–¥–æ\s*\d+[\d\s]*\s*‚ÇΩ', '', title).strip()
    
    if len(title) < 10 or '–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ' in title.lower():
        title_match = re.search(r'(–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞|[–ê-–Ø–∞-—èA-Za-z\s]+–±–æ—Ç[–∞-—è]*[^.]*)', email_body, re.IGNORECASE)
        if title_match:
            title = title_match.group(0).strip()
    
    description = ""
    lines = email_body.split('\n')
    for i, line in enumerate(lines):
        line = line.strip()
        if line and 'YouDo' not in line and '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è' not in line and '–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ' not in line.lower():
            if len(line) > 20:  
                description += line + " "
                if len(description) > 300:  
                    break
    
    budget_match = re.search(r'–¥–æ\s*(\d[\d\s]*)\s*‚ÇΩ', subject)
    if not budget_match:
        budget_match = re.search(r'–¥–æ\s*(\d[\d\s]*)\s*‚ÇΩ', email_body)
    
    budget = int(budget_match.group(1).replace(' ', '')) if budget_match else None
    
    return {
        'title': title.strip(),
        'description': description.strip()[:400],  
        'budget': budget
    }

def calculate_offer_price(client_budget):
    """–†–∞—Å—á—ë—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã (–∑–∞–Ω–∏–∂–∞–µ–º –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏)"""
    if not client_budget:
        return None
    
    discount_percent = 20
    offer_price = int(client_budget * (1 - discount_percent / 100))
    
    if offer_price >= 1000:
        offer_price = round(offer_price / 100) * 100
    else:
        offer_price = round(offer_price / 50) * 50
    
    return offer_price

def generate_response(task_info):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞ —á–µ—Ä–µ–∑ GPT"""
    offer_price = calculate_offer_price(task_info['budget'])
    
    price_instruction = ""
    if offer_price:
        price_instruction = f"–£–∫–∞–∂–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å {offer_price} —Ä—É–±–ª–µ–π."
    
    prompt = f"""–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Telegram-–±–æ—Ç–∞.

–ó–ê–î–ê–ù–ò–ï:
{task_info['title']}
{task_info['description']}
–ë—é–¥–∂–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {task_info['budget']} —Ä—É–±

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å, –±–µ–∑ —ç–º–æ—Ü–∏–π
2. –ö—Ä–∞—Ç–∫–æ: 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º
3. {price_instruction}
4. –ö–æ–Ω—Ç–∞–∫—Ç: @vsevolod_developer
5. –ë–ï–ó "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–°–ø–∞—Å–∏–±–æ", "–ñ–¥—É –æ—Ç–≤–µ—Ç–∞" - —Ç–æ–ª—å–∫–æ —Å—É—Ç—å
6. –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –ù–ï –ø—Ä–æ Telegram-–±–æ—Ç–∞ - –Ω–∞–ø–∏—à–∏ —á—Ç–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ –±–æ—Ç–∞—Ö, –Ω–æ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º

–®–ê–ë–õ–û–ù (–≤–∞—Ä—å–∏—Ä—É–π):
"–ì–æ—Ç–æ–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç. [1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–º –æ–ø—ã—Ç–µ]. –°—Ç–æ–∏–º–æ—Å—Ç—å: [—Ü–µ–Ω–∞] —Ä—É–±. Telegram: @vsevolod_developer"

–ù–∞–ø–∏—à–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –æ—Ç–∫–ª–∏–∫–∞."""

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–∏—à–µ—à—å –∫—Ä–∞—Ç–∫–∏–µ –¥–µ–ª–æ–≤—ã–µ –æ—Ç–∫–ª–∏–∫–∏ –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=200,
            timeout=30  
        )
        
        generated_text = response.choices[0].message.content.strip()
        generated_text = generated_text.strip('"').strip("'")
        return generated_text, offer_price
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
        return None, None

async def send_to_telegram(task_info, response_text, offer_price):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram"""
    try:
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        
        message = f"üîî <b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ</b>\n\n"
        message += f"üìã {task_info['title']}\n\n"
        
        if task_info['budget']:
            message += f"üí∞ –ë—é–¥–∂–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {task_info['budget']:,} ‚ÇΩ\n".replace(',', ' ')
        
        if offer_price:
            message += f"üíµ –¢–≤–æ—è —Ü–µ–Ω–∞: {offer_price:,} ‚ÇΩ\n\n".replace(',', ' ')
        else:
            message += "\n"
        
        message += f"<b>–û–¢–ö–õ–ò–ö:</b>\n<code>{response_text}</code>"
        
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=message,
            parse_mode='HTML'
        )
        
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {task_info['title'][:50]}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")

def get_email_date(msg):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –ø–∏—Å—å–º–∞"""
    try:
        date_str = msg.get("Date")
        date_tuple = email.utils.parsedate_tz(date_str)
        if date_tuple:
            timestamp = email.utils.mktime_tz(date_tuple)
            return datetime.fromtimestamp(timestamp)
    except:
        pass
    return datetime.now()

def check_new_emails():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –æ—Ç YouDo"""
    mail = connect_to_gmail()
    if not mail:
        return
    
    try:
        mail.select("inbox")
        
        status, messages = mail.search(None, 'UNSEEN FROM "YouDo"')
        
        if status != "OK":
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º")
            return
        
        email_ids = messages[0].split()
        
        if not email_ids:
            print(f"‚è≥ [{datetime.now().strftime('%H:%M:%S')}] –ù–æ–≤—ã—Ö –ø–∏—Å–µ–º –Ω–µ—Ç")
            return
        
        time_threshold = datetime.now() - timedelta(minutes=PROCESS_LAST_MINUTES)
        
        print(f"\nüìß –ù–∞–π–¥–µ–Ω–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {len(email_ids)}")
        new_count = 0
        
        for email_id in email_ids:
            try:
                email_uid = email_id.decode()
                
                if email_uid in processed_emails:
                    continue
                
                status, msg_data = mail.fetch(email_id, "(RFC822)")
                
                if status != "OK":
                    continue
                
                msg = email.message_from_bytes(msg_data[0][1])
                
                email_date = get_email_date(msg)
                if email_date < time_threshold:
                    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Å—Ç–∞—Ä–æ–≥–æ –ø–∏—Å—å–º–∞ –æ—Ç {email_date.strftime('%H:%M:%S')}")
                    processed_emails.add(email_uid)
                    continue
                
                subject = decode_header(msg["Subject"])[0][0]
                if isinstance(subject, bytes):
                    subject = subject.decode()
                
                if '–ø–æ–¥–±–æ—Ä–∫–∞' in subject.lower() or '—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º' in subject.lower():
                    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –ø–æ–¥–±–æ—Ä–∫–∏")
                    processed_emails.add(email_uid)
                    continue
                
                print(f"\nüì® {subject}")
                
                email_body = parse_email_body(msg)
                
                task_info = extract_task_info(email_body, subject)
                
                if not task_info['budget'] or task_info['budget'] < 500:
                    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ (–±—é–¥–∂–µ—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)")
                    processed_emails.add(email_uid)
                    continue
                
                print(f"üí∞ –ë—é–¥–∂–µ—Ç: {task_info['budget']} ‚ÇΩ")
                
                response_text, offer_price = generate_response(task_info)
                
                if response_text:
                    asyncio.run(send_to_telegram(task_info, response_text, offer_price))
                    new_count += 1
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫")
                
                processed_emails.add(email_uid)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞: {e}")
                continue
        
        if new_count > 0:
            print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {new_count}")
        
        mail.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã: {e}")
    finally:
        try:
            mail.logout()
        except:
            pass

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª"""
    print("üöÄ YouDo Email Monitor Bot –∑–∞–ø—É—â–µ–Ω!")
    print(f"üìß Gmail: {GMAIL_USER}")
    print(f"‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª: {CHECK_INTERVAL} —Å–µ–∫")
    print(f"üïê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –ø–∏—Å—å–º–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {PROCESS_LAST_MINUTES} –º–∏–Ω—É—Ç")
    print(f"üí¨ Telegram: {TELEGRAM_CHAT_ID}")
    print("\n" + "="*50 + "\n")
    
    while True:
        try:
            check_new_emails()
            time.sleep(CHECK_INTERVAL)
            
        except KeyboardInterrupt:
            print("\n\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
    main()