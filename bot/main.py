import imaplib
import email
from email.header import decode_header
import time
import re
from openai import OpenAI
from telegram import Bot
import asyncio
from datetime import datetime, timedelta
import os
from bs4 import BeautifulSoup
import dotenv
import httpx

dotenv.load_dotenv()

GMAIL_USER = os.getenv('GMAIL_USER')

GMAIL_APP_PASSWORD = os.getenv('GMAIL_APP_PASSWORD')

OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

proxy_url = os.getenv('SHADOWSOCKS_PROXY')

CHECK_INTERVAL = 10 

PROCESS_LAST_MINUTES = 10

http_client = None

if proxy_url:
    print(f"üîê Using proxy for OpenAI: {proxy_url}")
    http_client = httpx.Client(
        proxy=proxy_url,
        timeout=30.0
    )

client = OpenAI(
    api_key=OPENAI_API_KEY,
    http_client=http_client
)

processed_emails = set() 

def connect_to_gmail():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gmail —á–µ—Ä–µ–∑ IMAP"""
    try:
        mail = imaplib.IMAP4_SSL("imap.gmail.com")
        mail.login(GMAIL_USER, GMAIL_APP_PASSWORD)
        return mail
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gmail: {e}")
        return None

def parse_email_body(msg):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–∏—Å—å–º–∞ - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è YouDo"""
    body = ""
    
    try:
        if msg.is_multipart():
            for part in msg.walk():
                content_type = part.get_content_type()
                content_disposition = str(part.get("Content-Disposition", ""))
                
                if "attachment" in content_disposition:
                    continue
                
                if content_type == "text/plain":
                    try:
                        payload = part.get_payload(decode=True)
                        if payload:
                            for encoding in ['utf-8', 'latin-1', 'iso-8859-1', 'cp1252']:
                                try:
                                    body = payload.decode(encoding)
                                    if body.strip() and len(body) > 20:
                                        return body.strip()
                                except:
                                    continue
                    except Exception as e:
                        pass
                
                if content_type == "text/html":
                    try:
                        payload = part.get_payload(decode=True)
                        if payload:
                            for encoding in ['utf-8', 'latin-1', 'iso-8859-1', 'cp1252']:
                                try:
                                    html = payload.decode(encoding)
                                    soup = BeautifulSoup(html, 'html.parser')
                                    
                                    for tag in soup(['script', 'style', 'meta', 'link', 'noscript']):
                                        tag.decompose()
                                    
                                    text = soup.get_text(separator='\n', strip=True)
                                    
                                    text = ''.join(c for c in text if not ((0x200b <= ord(c) <= 0x200f) or (0x2060 <= ord(c) <= 0x2064) or ord(c) == 0xfeff or ord(c) == 0xad))
                                    
                                    lines = [line.strip() for line in text.split('\n') if line.strip() and len(line.strip()) > 1]
                                    cleaned_text = '\n'.join(lines)
                                    
                                    if cleaned_text:
                                        body = cleaned_text
                                        break
                                except:
                                    continue
                        
                        if body:
                            return body.strip()
                    except Exception as e:
                        pass
        else:
            try:
                payload = msg.get_payload(decode=True)
                if payload:
                    for encoding in ['utf-8', 'latin-1', 'iso-8859-1', 'cp1252']:
                        try:
                            body = payload.decode(encoding)
                            if body.strip() and len(body) > 20:
                                return body.strip()
                        except:
                            continue
            except Exception as e:
                pass
        
        if body:
            return body.strip()
        else:
            print(f"‚ö†Ô∏è  –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω! –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {[part.get_content_type() for part in msg.walk()]}")
            return ""
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ parse_email_body: {e}")
        return ""

def extract_task_info(email_body, subject):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏ –∏–∑ –ø–∏—Å—å–º–∞"""
    
    clean_text = lambda t: ''.join(c for c in t if not ((0x200b <= ord(c) <= 0x200f) or (0x2060 <= ord(c) <= 0x2064) or ord(c) == 0xfeff or ord(c) == 0xad))
    
    email_body = clean_text(email_body)
    subject = clean_text(subject)
    
    title = subject
    title = re.sub(r'–¥–æ\s*\d+[\d\s]*‚ÇΩ', '', title).strip()
    
    description = ""
    lines = email_body.split('\n')
    
    skip_keywords = ['YouDo', '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', '–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ', '–ø–æ–¥–±–æ—Ä–∫–∞', '—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º', '–ø–∏—Å—å–º–∞', 'gmail']
    
    for line in lines:
        line_stripped = line.strip()
        
        if not line_stripped:
            continue
        
        if any(keyword.lower() in line.lower() for keyword in skip_keywords):
            continue
        
        description += line_stripped + " "
    
    budget_match = re.search(r'–¥–æ\s*(\d[\d\s]*)\s*‚ÇΩ', subject)
    if not budget_match:
        budget_match = re.search(r'–¥–æ\s*(\d[\d\s]*)\s*‚ÇΩ', email_body)
    
    budget = int(budget_match.group(1).replace(' ', '')) if budget_match else None
    
    description = ' '.join(description.split())
    
    description_for_log = ''.join(c for c in description if ord(c) >= 32 or c in '\n\t\r')
    
    return {
        'title': title.strip(),
        'description': description.strip(),
        'budget': budget,
        'full_text': email_body
    }


def should_mention_price_in_response(email_body, subject) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—Å–∏—Ç –ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –æ—Ü–µ–Ω–∫—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –æ—Ç–∫–ª–∏–∫–µ
    –ò—â–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞: "–Ω–∞–ø–∏—à–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å", "—É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É", "—Å —Ü–µ–Ω–æ–π"
    """
    price_keywords = [
        '–Ω–∞–ø–∏—à–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å',
        '—É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É',
        '—Å —Ü–µ–Ω–æ–π',
        '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç',
        '—É–∫–∞–∂–∏ —Ü–µ–Ω—É',
        '—Ü–µ–Ω–∞ –≤ –æ—Ç–∫–ª–∏–∫–µ',
        '—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –æ—Ç–∫–ª–∏–∫–µ',
        '–Ω–∞–ø–∏—à–∏ —Ü–µ–Ω—É',
    ]
    
    full_text = (subject + ' ' + email_body).lower()
    return any(keyword in full_text for keyword in price_keywords)


def generate_response(task_info):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ —á–µ—Ä–µ–∑ GPT"""
    
    should_price = should_mention_price_in_response(task_info['full_text'], task_info['title'])
    
    price_section = ""
    if should_price and task_info['budget']:
        budget = task_info['budget']
        if budget < 1000:
            offer_price = budget - (budget * 0.1)  
        elif budget < 5000:
            offer_price = budget - (budget * 0.15)  
        else:
            offer_price = budget - (budget * 0.2)  
        
        offer_price = int(offer_price)
        if offer_price >= 1000:
            offer_price = round(offer_price / 100) * 100
        else:
            offer_price = round(offer_price / 50) * 50
        
        price_section = f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã: {offer_price} ‚ÇΩ. "
    
    # task_text = (task_info['title'] + ' ' + task_info['description']).lower()

    
    prompt = f"""
        –¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ, –¥–µ–ª–æ–≤—ã–µ –∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑—ã –Ω–∞ YouDo. 
        –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏ —Å–µ—Ä—å—ë–∑–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –Ω–µ —Ä–∞—Å–ø–∏—Å—ã–≤–∞—è –ª–∏—à–Ω–µ–≥–æ. 
        –ü–∏—à–∏ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä—ë—Ç –∑–∞–¥–∞—á—É –∏ –¥–µ–ª–∞–µ—Ç –µ—ë ‚Äî —Å–ø–æ–∫–æ–π–Ω–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —ç–º–æ—Ü–∏–π.

        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:
        –ó–ê–î–ê–ù–ò–ï: {task_info['title']}
        –û–ü–ò–°–ê–ù–ò–ï: {task_info['description']}

        –ü—Ä–∞–≤–∏–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞:
        1. –ù–∞—á–Ω–∏ —Å "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!".
        2. –°—Ä–∞–∑—É –ø–æ –¥–µ–ª—É ‚Äî 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –≥–¥–µ —Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—à—å, —á—Ç–æ –ø–æ–Ω—è–ª –∑–∞–¥–∞—á—É –∏ –≥–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—ë –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ.
        3. 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî —á—ë—Ç–∫–æ –æ–ø–∏—à–∏, **—á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å –∏ –∫–∞–∫**, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π, –Ω–æ —Å –æ—â—É—â–µ–Ω–∏–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è.
        –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ—Ä–∞–∑—É –æ –ø–æ—Ö–æ–∂–µ–º –æ–ø—ã—Ç–µ –∏–ª–∏ –ø–æ–¥—Ö–æ–¥–µ ("—Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞–ª –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è", "–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–ª –ø–æ–¥–æ–±–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã", "–∑–Ω–∞—é, –∫–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∑–∞–¥–∞—á—É").
        {f'4. –ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ, —É–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É –∏ —Å—Ä–æ–∫, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—è—Å—å –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {price_section}' if price_section else '4. –ë–µ–∑ —Ü–µ–Ω—ã ‚Äî –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏, —á—Ç–æ –¥–µ—Ç–∞–ª–∏ –∏ –±—é–¥–∂–µ—Ç –º–æ–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –≤ Telegram.'}
        5. –ó–∞–≤–µ—Ä—à–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ:
        ‚Äú–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ ‚Äî GitHub @avescodder. –°–≤—è–∑—å ‚Äî Telegram @vsevolod_developer.‚Äù
        6. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown, —Å–ø–∏—Å–∫–∏, –∫–∞–≤—ã—á–∫–∏, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –∏ —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ ‚Äú–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ‚Äù, ‚Äú–±—ã—Å—Ç—Ä–æ‚Äù, ‚Äú–±–æ–ª—å—à–æ–π –æ–ø—ã—Ç‚Äù.
        7. –°—Ç–∏–ª—å ‚Äî –¥–µ–ª–æ–≤–æ–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π. –ë–µ–∑ —ç–º–æ—Ü–∏–π, –±–µ–∑ —Ñ–∞–ª—å—à–∏. –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –ø–æ –¥–µ–ª—É.
        8. –û—Ç–∫–ª–∏–∫ –¥–æ–ª–∂–µ–Ω –∑–≤—É—á–∞—Ç—å –∫–∞–∫ —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ —É—Ä–æ–≤–Ω—è middle/senior, –∞ –Ω–µ —à–∞–±–ª–æ–Ω.

        –í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º –æ—Ç–∫–ª–∏–∫, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
        """

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ, —á–µ—Å—Ç–Ω—ã–µ –∏ —Ü–µ–ø–ª—è—é—â–∏–µ –æ—Ç–∫–ª–∏–∫–∏. –ë–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤ –∏ —à—Ç–∞–º–ø–æ–≤. –Ø–∑—ã–∫ - —Ä—É—Å—Å–∫–∏–π."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.8,  
            max_tokens=300
        )
        
        generated_text = response.choices[0].message.content.strip()
        generated_text = generated_text.strip('"').strip("'")
        
        generated_text = re.sub(r'^\d+\.\s+', '', generated_text)  
        
        return generated_text
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
        return None

async def send_to_telegram(task_info, response_text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram"""
    try:
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        
        message = f"üîî <b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ</b>\n\n"
        message += f"üìã {task_info['title']}\n\n"
        
        if task_info['budget']:
            message += f"üí∞ –ë—é–¥–∂–µ—Ç: {task_info['budget']:,} ‚ÇΩ\n\n".replace(',', ' ')
        else:
            message += "\n"
        
        message += f"<b>–û–¢–ö–õ–ò–ö:</b>\n<code>{response_text}</code>"
        
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=message,
            parse_mode='HTML'
        )
        
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")

def get_email_date(msg):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –ø–∏—Å—å–º–∞"""
    try:
        date_str = msg.get("Date")
        date_tuple = email.utils.parsedate_tz(date_str)
        if date_tuple:
            timestamp = email.utils.mktime_tz(date_tuple)
            return datetime.fromtimestamp(timestamp)
    except:
        pass
    return datetime.now()

def check_new_emails():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –æ—Ç YouDo"""
    mail = connect_to_gmail()
    if not mail:
        return
    
    try:
        mail.select("inbox")
        
        status, messages = mail.search(None, 'UNSEEN FROM "YouDo"')
        
        if status != "OK":
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º")
            return
        
        email_ids = messages[0].split()
        
        if not email_ids:
            return
        
        time_threshold = datetime.now() - timedelta(minutes=PROCESS_LAST_MINUTES)
        new_count = 0
        
        for email_id in email_ids:
            try:
                email_uid = email_id.decode()
                
                if email_uid in processed_emails:
                    continue
                
                status, msg_data = mail.fetch(email_id, "(RFC822)")
                
                if status != "OK":
                    continue
                
                msg = email.message_from_bytes(msg_data[0][1])
                
                email_date = get_email_date(msg)
                if email_date < time_threshold:
                    processed_emails.add(email_uid)
                    continue
                
                subject = decode_header(msg["Subject"])[0][0]
                if isinstance(subject, bytes):
                    subject = subject.decode()
                
                if '–ø–æ–¥–±–æ—Ä–∫–∞' in subject.lower() or '—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º' in subject.lower():
                    processed_emails.add(email_uid)
                    continue
                
                
                email_body = parse_email_body(msg)
                
                task_info = extract_task_info(email_body, subject)
                
                if not task_info['budget'] or task_info['budget'] < 500:
                    processed_emails.add(email_uid)
                    continue
                
                
                response_text = generate_response(task_info)
                
                if response_text:
                    asyncio.run(send_to_telegram(task_info, response_text))
                    new_count += 1
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫")
                
                processed_emails.add(email_uid)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞: {e}")
                continue
        
        if new_count > 0:
            print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {new_count}")
        
        mail.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã: {e}")
    finally:
        try:
            mail.logout()
        except:
            pass

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª"""
    print("üöÄ YouDo Email Monitor Bot –∑–∞–ø—É—â–µ–Ω!")
    print(f"üìß Gmail: {GMAIL_USER}")
    print(f"‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª: {CHECK_INTERVAL} —Å–µ–∫")
    print(f"üïê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –ø–∏—Å—å–º–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {PROCESS_LAST_MINUTES} –º–∏–Ω—É—Ç")
    print(f"üí¨ Telegram: {TELEGRAM_CHAT_ID}")
    print("\n" + "="*50 + "\n")
    
    while True:
        try:
            check_new_emails()
            time.sleep(CHECK_INTERVAL)
            
        except KeyboardInterrupt:
            print("\n\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
    main()